import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from fpdf import FPDF
import os
from datetime import datetime
import matplotlib.dates as mdates
from pathlib import Path

# -------------------------------
# Configuraci√≥n de directorios
# -------------------------------
base_dir = Path(r"D:\Beltr√°n\Segundo a√±o TS CD e IA\Modelizado de Miner√≠a de Datos\TSCIA_MMD\Proyecto_4")
data_dir = base_dir / "DataCSV"
graficos_dir = base_dir / "graficos"
pdf_path = base_dir / "informe_maquetas_trenes.pdf"

graficos_dir.mkdir(parents=True, exist_ok=True)

# Configuraci√≥n de estilo para matplotlib
plt.style.use('default')
sns.set_palette("husl")

print("üîß Iniciando proceso de carga de CSV...")

# -------------------------------
# Lectura de archivos CSV
# -------------------------------
try:
    # Dataset principal de productos
    productos_df = pd.read_csv(data_dir / "producto_trenes.csv", sep=';', encoding='utf-8')
    
    # Fabricantes
    fabricantes_df = pd.read_csv(data_dir / "fabricantes.csv", sep=';', encoding='utf-8')
    
    # Clientes
    clientes_df = pd.read_csv(data_dir / "clientes.csv", sep=';', encoding='utf-8')
    
    # Ventas
    ventas_df = pd.read_csv(data_dir / "facturas.csv", sep=';', encoding='utf-8')

    # Renombrar columnas ID para evitar conflictos (del c√≥digo 1)
    productos_df = productos_df.rename(columns={'ID':'producto_ID'})
    fabricantes_df = fabricantes_df.rename(columns={'ID':'fabricante_ID'})
    clientes_df = clientes_df.rename(columns={'ID':'cliente_ID'})

    print("‚úÖ Archivos CSV le√≠dos y columnas renombradas correctamente")

except Exception as e:
    print(f"‚ùå Error leyendo archivos CSV: {e}")
    exit()

# -------------------------------
# Merge de los datos
# -------------------------------
ventas_completas_df = ventas_df.merge(productos_df, left_on='id_producto', right_on='producto_ID', how='left')
ventas_completas_df = ventas_completas_df.merge(fabricantes_df, left_on='id_fabricante_maqueta', right_on='fabricante_ID', how='left')
ventas_completas_df = ventas_completas_df.merge(clientes_df, left_on='id_clientes', right_on='cliente_ID', how='left')

ventas_completas_df['FechaEmision'] = pd.to_datetime(ventas_completas_df['FechaEmision'])

print("‚úÖ Merge de datos completado correctamente")
print("üìä Generando gr√°ficos...")

# -------------------------------
# 1. Stock por fabricante
# -------------------------------
plt.figure(figsize=(10, 8))
stock_por_fabricante = productos_df.groupby('id_fabricante_maqueta')['CantStockActual'].sum()
fabricantes_nombres = fabricantes_df.set_index('fabricante_ID').loc[stock_por_fabricante.index]['Fabricante']

colors_pie = ['#FF6B6B', '#4ECDC4', '#FFE66D']
plt.pie(stock_por_fabricante.values, labels=fabricantes_nombres.values, autopct='%1.1f%%', colors=colors_pie, startangle=90)
plt.title('Distribuci√≥n de Stock Actual por Fabricante', fontsize=14, fontweight='bold')
plt.savefig(os.path.join(graficos_dir, '1_stock_por_fabricante.png'), dpi=300, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico 1: Stock por fabricante - GENERADO")

# -------------------------------
# 2. Productos m√°s vendidos
# -------------------------------
plt.figure(figsize=(12, 8))
ventas_por_producto = ventas_df.groupby('id_producto')['Cantidad'].sum().sort_values(ascending=False)
productos_nombres = productos_df.set_index('producto_ID').loc[ventas_por_producto.index]['Nombre']

bars = plt.bar(range(len(ventas_por_producto)), ventas_por_producto.values, color='#2E8B57', alpha=0.8)
plt.xlabel('Productos')
plt.ylabel('Cantidad Vendida')
plt.title('Productos M√°s Vendidos', fontsize=14, fontweight='bold')
plt.xticks(range(len(ventas_por_producto)), [f"Prod {i}" for i in ventas_por_producto.index], rotation=45)

for bar, valor in zip(bars, ventas_por_producto.values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, str(valor), ha='center', va='bottom')

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '2_productos_mas_vendidos.png'), dpi=300, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico 2: Productos m√°s vendidos - GENERADO")

# -------------------------------
# 3. Precios de productos
# -------------------------------
plt.figure(figsize=(12, 8))
productos_ordenados = productos_df.sort_values('PrecioUSD', ascending=False)
bars = plt.bar(range(len(productos_ordenados)), productos_ordenados['PrecioUSD'], color='#87CEEB', alpha=0.8)
plt.xlabel('Productos')
plt.ylabel('Precio (USD)')
plt.title('Precios de los Productos', fontsize=14, fontweight='bold')
plt.xticks(range(len(productos_ordenados)), [f"Prod {i}" for i in productos_ordenados['producto_ID']], rotation=45)

for bar, precio in zip(bars, productos_ordenados['PrecioUSD']):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 10, f"${precio:.2f}", ha='center', va='bottom', fontsize=9)

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '3_precios_productos.png'), dpi=300, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico 3: Precios de productos - GENERADO")

# -------------------------------
# 4. Evoluci√≥n de ventas
# -------------------------------
plt.figure(figsize=(14, 8))
ventas_por_mes = ventas_completas_df.groupby(ventas_completas_df['FechaEmision'].dt.to_period('M')).size()
ventas_por_mes.index = ventas_por_mes.index.to_timestamp()

plt.plot(ventas_por_mes.index, ventas_por_mes.values, color='#FF4444', linewidth=2.5, marker='o')
plt.xlabel('Fecha')
plt.ylabel('Cantidad de Ventas')
plt.title('Evoluci√≥n de Ventas Mensuales (2023-2025)', fontsize=14, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=3))
plt.gcf().autofmt_xdate()

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '4_evolucion_ventas.png'), dpi=300, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico 4: Evoluci√≥n de ventas - GENERADO")

# -------------------------------
# 5. Clientes que m√°s compraron
# -------------------------------
plt.figure(figsize=(12, 10))
compras_por_cliente = ventas_df.groupby('id_clientes')['Cantidad'].sum().sort_values(ascending=True).tail(15)
clientes_nombres = clientes_df.set_index('cliente_ID').loc[compras_por_cliente.index]['Nombre']

bars = plt.barh(range(len(compras_por_cliente)), compras_por_cliente.values, color='#32CD32', alpha=0.8)
plt.ylabel('Clientes')
plt.xlabel('Cantidad Total Comprada')
plt.title('Top 15 - Clientes que M√°s Compraron', fontsize=14, fontweight='bold')
plt.yticks(range(len(compras_por_cliente)), clientes_nombres.values)

for bar, valor in zip(bars, compras_por_cliente.values):
    plt.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2, str(valor), ha='left', va='center')

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '5_clientes_mas_compraron.png'), dpi=300, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico 5: Clientes que m√°s compraron - GENERADO")

# -------------------------------
# 6. Productos m√°s caros
# -------------------------------
plt.figure(figsize=(12, 8))
productos_caros = productos_df.nlargest(8, 'PrecioUSD')
bars = plt.bar(range(len(productos_caros)), productos_caros['PrecioUSD'], color='#FFD700', alpha=0.8)
plt.xlabel('Productos')
plt.ylabel('Precio (USD)')
plt.title('Productos M√°s Caros', fontsize=14, fontweight='bold')
plt.xticks(range(len(productos_caros)), [f"{row['Nombre'][:15]}..." for _, row in productos_caros.iterrows()], rotation=45, ha='right')

for bar, precio in zip(bars, productos_caros['PrecioUSD']):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 20, f"${precio:.2f}", ha='center', va='bottom')

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '6_productos_mas_caros.png'), dpi=300, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico 6: Productos m√°s caros - GENERADO")

# -------------------------------
# 7. Matriz de calor
# -------------------------------
plt.figure(figsize=(12, 8))
top_productos = productos_df.nlargest(5, 'PrecioUSD')
matriz_data = []
for _, producto in top_productos.iterrows():
    cantidad_vendida = ventas_df[ventas_df['id_producto'] == producto['producto_ID']]['Cantidad'].sum()
    matriz_data.append([producto['PrecioUSD'], cantidad_vendida])

matriz_data = np.array(matriz_data).T
sns.heatmap(matriz_data, annot=True, fmt='.1f', cmap='YlOrRd',
            xticklabels=[f"Prod {i}" for i in top_productos['producto_ID']],
            yticklabels=['Precio (USD)', 'Cantidad Vendida'])
plt.title('Matriz de Calor: Precio vs Cantidad Vendida (Top 5 Productos M√°s Caros)', fontsize=14, fontweight='bold')
plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '7_matriz_calor.png'), dpi=300, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico 7: Matriz de calor - GENERADO")

# -------------------------------
# Generaci√≥n del PDF
# -------------------------------
print("üìÑ Generando informe PDF...")

class PDFReport(FPDF):
    def header(self):
        if self.page == 1:
            self.set_font('Times', 'B', 16)
            self.cell(0, 10, 'INFORME COMPLETO - VENTAS DE MAQUETAS DE TRENES', 0, 1, 'C')
            self.set_font('Times', 'B', 14)
            self.cell(0, 10, 'An√°lisis de Datos y Tendencias del Mercado', 0, 1, 'C')
            self.ln(10)
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Times', 'I', 8)
        self.cell(0, 10, f'P√°gina {self.page}', 0, 0, 'C')
    
    def chapter_title(self, title):
        self.set_font('Times', 'B', 14)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(5)
    
    def chapter_body(self, body):
        self.set_font('Times', '', 12)
        # Configurar interlineado usando set_font_size y multi_cell con altura personalizada
        self.multi_cell(0, 7, body)  # Aument√© la altura de 6 a 7 para mejor interlineado
        self.ln()
    
    def add_image_with_description(self, image_path, description):
        """M√©todo auxiliar para agregar imagen y descripci√≥n"""
        self.image(image_path, x=10, w=190)
        self.ln(5)
        self.chapter_body(description)

pdf = PDFReport()
pdf.set_auto_page_break(auto=True, margin=15)
pdf.add_page()

# -------------------------------
# Introducci√≥n
# -------------------------------
pdf.chapter_title('INTRODUCCI√ìN')
intro_text = """
Este informe presenta un an√°lisis completo de las ventas de maquetas de trenes para el per√≠odo 
2023-2025. El an√°lisis incluye distribuci√≥n de stock, comportamiento de ventas, perfil de clientes 
y relaci√≥n entre precio y demanda. Los datos fueron procesados mediante t√©cnicas de miner√≠a de datos 
y visualizaci√≥n para extraer insights estrat√©gicos que permitan optimizar el inventario y las 
estrategias de marketing.
"""
pdf.chapter_body(intro_text)

# -------------------------------
# Agregar gr√°ficos y explicaciones detalladas (combinaci√≥n de ambos c√≥digos)
# -------------------------------
graficos = [
    ('1. DISTRIBUCI√ìN DE STOCK POR FABRICANTE', '1_stock_por_fabricante.png', 
     "El gr√°fico circular muestra la distribuci√≥n del stock actual entre los tres principales fabricantes "
     "de maquetas. M√§rklin lidera con el mayor porcentaje de inventario, seguido por Hornby y Bachmann. "
     "Esta distribuci√≥n refleja la estrategia de abastecimiento y la demanda hist√≥rica por cada marca. "
     "Es importante mantener un equilibrio en el stock para satisfacer las preferencias de los coleccionistas "
     "y evitar excesos de inventario que puedan generar costos de almacenamiento innecesarios. "
     "La rotaci√≥n de stock debe ser monitoreada continuamente para ajustar los pedidos futuros."),
    
    ('2. PRODUCTOS M√ÅS VENDIDOS', '2_productos_mas_vendidos.png', 
     "El gr√°fico de barras verticales identifica los productos con mayor volumen de ventas. Se observa "
     "una clara preferencia por ciertos modelos espec√≠ficos, posiblemente relacionados con su escala, "
     "nivel de detalle o precio accesible. Los productos en el rango medio de precio tienden a tener "
     "mejor rotaci√≥n. Este an√°lisis permite identificar los best-sellers y planificar campa√±as de "
     "marketing alrededor de estos productos. Adem√°s, sugiere oportunidades para desarrollar bundles "
     "o promociones con productos de menor movimiento."),
    
    ('3. AN√ÅLISIS DE PRECIOS DE PRODUCTOS', '3_precios_productos.png', 
     "Este gr√°fico presenta la estructura de precios de todo el cat√°logo de productos. Se observa una "
     "amplia variaci√≥n en los precios, desde modelos b√°sicos hasta ediciones premium de colecci√≥n. "
     "La estrategia de precios parece segmentar el mercado en diferentes niveles: entrada, intermedio "
     "y premium. Los productos en el rango medio-alto representan un balance entre calidad y "
     "accesibilidad. Es crucial mantener esta diversidad para atraer tanto a coleccionistas "
     "experimentados como a nuevos entusiastas del hobby."),
    
    ('4. EVOLUCI√ìN TEMPORAL DE VENTAS', '4_evolucion_ventas.png', 
     "La l√≠nea de tendencia muestra la evoluci√≥n mensual de ventas desde enero 2023 hasta julio 2025. "
     "Se identifican patrones estacionales claros con picos en ciertos meses, posiblemente relacionados "
     "con temporadas festivas o lanzamientos de nuevos productos. Los valles pueden indicar per√≠odos "
     "de menor actividad comercial o falta de promociones. El an√°lisis temporal permite anticipar "
     "demanda futura y planificar inventarios. La tendencia general muestra crecimiento sostenido, "
     "indicando salud del mercado de maquetas."),
    
    ('5. PERFIL DE CLIENTES M√ÅS ACTIVOS', '5_clientes_mas_compraron.png', 
     "El gr√°fico horizontal identifica a los 15 clientes con mayor volumen de compras. Estos clientes "
     "representan una valiosa base de coleccionistas frecuentes que deben ser objetivo de programas "
     "de fidelizaci√≥n. El an√°lisis sugiere que un peque√±o grupo de clientes contribuye "
     "desproporcionadamente a las ventas totales. Estrategias como programas VIP, acceso anticipado "
     "a nuevos lanzamientos y contenido exclusivo podr√≠an fortalecer la relaci√≥n con estos clientes "
     "y aumentar su valor de por vida."),
    
    ('6. PRODUCTOS DE ALTA GAMA', '6_productos_mas_caros.png', 
     "Este an√°lisis focaliza en los productos premium del cat√°logo. Las maquetas de mayor precio "
     "generalmente corresponden a ediciones limitadas, alto nivel de detalle o escalas especiales. "
     "Aunque estos productos tienen menor rotaci√≥n, contribuyen significativamente al margen bruto "
     "y al prestigio de la marca. Es importante mantener un portfolio balanceado que incluya estas "
     "piezas de exhibici√≥n mientras se asegura disponibilidad de productos de entrada para capturar "
     "nuevos segmentos del mercado."),
    
    ('7. RELACI√ìN PRECIO VS CANTIDAD VENDIDA', '7_matriz_calor.png', 
     "La matriz de calor compara el precio con la cantidad vendida para los 5 productos m√°s caros. "
     "Los tonos m√°s intensos indican valores m√°s altos en cada dimensi√≥n. Se observa que los productos "
     "m√°s costosos no necesariamente son los menos vendidos, sugiriendo que existe un segmento de "
     "coleccionistas dispuestos a invertir en piezas premium. Esta relaci√≥n precio-demanda ayuda a "
     "optimizar la estrategia de precios y identificar oportunidades para desarrollar productos en "
     "rangos de precio espec√≠ficos que maximicen tanto volumen como margen."),
]

for titulo, archivo, descripcion in graficos:
    pdf.add_page()
    pdf.chapter_title(titulo)
    pdf.image(os.path.join(graficos_dir, archivo), x=10, w=190)
    pdf.ln(5)  # Espacio despu√©s de la imagen
    pdf.chapter_body(descripcion)

# -------------------------------
# Conclusi√≥n mejorada (combinaci√≥n de ambos)
# -------------------------------
pdf.add_page()
pdf.chapter_title('CONCLUSIONES Y RECOMENDACIONES')
conclusion_text = """
El an√°lisis integral de ventas permite varias conclusiones clave:
- Identificaci√≥n de los fabricantes con mayor stock y necesidad de rotaci√≥n.
- Reconocimiento de los productos m√°s vendidos y estrategias de reposici√≥n.
- Comprensi√≥n de la evoluci√≥n temporal de las ventas y detecci√≥n de patrones estacionales.
- Identificaci√≥n de clientes estrat√©gicos y oportunidades de fidelizaci√≥n.
- Relaci√≥n precio-demanda para optimizar precios y m√°rgenes de productos premium.

RECOMENDACIONES ESTRAT√âGICAS:
1) Mantener diversidad en el portfolio de productos para cubrir todos los segmentos de precio.
2) Implementar programas de fidelizaci√≥n para clientes frecuentes.
3) Optimizar inventario basado en patrones estacionales identificados.
4) Desarrollar estrategias de marketing diferenciadas para productos premium vs. entry-level.
5) Continuar monitoreando la relaci√≥n precio-demanda para ajustar estrategias comerciales.

Este informe constituye una herramienta √∫til para la toma de decisiones estrat√©gicas en la gesti√≥n
de inventario y comercializaci√≥n de maquetas de trenes. El mercado de maquetas muestra resiliencia 
y potencial de crecimiento sostenido.
"""
pdf.chapter_body(conclusion_text)

# -------------------------------
# Guardar PDF
# -------------------------------
pdf.output(str(pdf_path))
print(f"‚úÖ Informe PDF generado correctamente en {pdf_path}")

# =============================================================================
# REPORTE FINAL EN CONSOLA (del c√≥digo 2)
# =============================================================================
print("\n" + "="*80)
print("üìã REPORTE FINAL - PROCESO COMPLETADO")
print("="*80)

# Estad√≠sticas resumen
total_ventas = ventas_df['Cantidad'].sum()
total_clientes = ventas_df['id_clientes'].nunique()
total_productos = productos_df['producto_ID'].nunique()
periodo_analisis = f"{ventas_df['FechaEmision'].min()} to {ventas_df['FechaEmision'].max()}"

print(f"\nüìä ESTAD√çSTICAS PRINCIPALES:")
print(f"   ‚Ä¢ Total de ventas realizadas: {total_ventas} unidades")
print(f"   ‚Ä¢ Clientes √∫nicos que compraron: {total_clientes}")
print(f"   ‚Ä¢ Productos en cat√°logo: {total_productos}")
print(f"   ‚Ä¢ Per√≠odo analizado: {periodo_analisis}")

print(f"\nüìà GR√ÅFICOS GENERADOS:")
graficos = [
    '1_stock_por_fabricante.png',
    '2_productos_mas_vendidos.png', 
    '3_precios_productos.png',
    '4_evolucion_ventas.png',
    '5_clientes_mas_compraron.png',
    '6_productos_mas_caros.png',
    '7_matriz_calor.png'
]

for grafico in graficos:
    ruta_completa = os.path.join(graficos_dir, grafico)
    if os.path.exists(ruta_completa):
        tama√±o = os.path.getsize(ruta_completa) / 1024  # Tama√±o en KB
        print(f"   ‚úÖ {grafico} ({tama√±o:.1f} KB)")

print(f"\nüìÑ ARCHIVOS CREADOS:")
print(f"   ‚Ä¢ PDF del informe: {pdf_path}")
print(f"   ‚Ä¢ Carpeta de gr√°ficos: {graficos_dir}")

print(f"\nüéØ PRODUCTO M√ÅS VENDIDO: Prod {ventas_por_producto.index[0]} ({ventas_por_producto.iloc[0]} unidades)")
print(f"üí∞ PRODUCTO M√ÅS CARO: {productos_caros.iloc[0]['Nombre']} (${productos_caros.iloc[0]['PrecioUSD']:.2f})")

print(f"\n‚úÖ PROCESO COMPLETADO EXITOSAMENTE")
print("="*80)