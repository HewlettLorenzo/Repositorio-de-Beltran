import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from fpdf import FPDF
import os
from datetime import datetime
import matplotlib.dates as mdates
from pathlib import Path

# -------------------------------
# Configuraci√≥n de directorios
# -------------------------------
base_dir = Path(r"D:\Beltr√°n\Segundo a√±o TS CD e IA\Modelizado de Miner√≠a de Datos\TSCIA_MMD\Proyecto_4\DataCSV")
data_dir = base_dir
graficos_dir = base_dir / "graficos"
pdf_path = base_dir / "informe_maquetas_trenes.pdf"

graficos_dir.mkdir(parents=True, exist_ok=True)

print("üîß Iniciando proceso de carga de CSV...")

# -------------------------------
# Lectura de archivos CSV
# -------------------------------
try:
    productos_df = pd.read_csv(data_dir / "producto_trenes.csv", sep=';', encoding='utf-8')
    fabricantes_df = pd.read_csv(data_dir / "fabricantes.csv", sep=';', encoding='utf-8')
    clientes_df = pd.read_csv(data_dir / "clientes.csv", sep=';', encoding='utf-8')
    ventas_df = pd.read_csv(data_dir / "facturas.csv", sep=';', encoding='utf-8')

    # Renombrar columnas ID para evitar conflictos
    productos_df = productos_df.rename(columns={'ID':'producto_ID'})
    fabricantes_df = fabricantes_df.rename(columns={'ID':'fabricante_ID'})
    clientes_df = clientes_df.rename(columns={'ID':'cliente_ID'})

    print("‚úÖ Archivos CSV le√≠dos y columnas renombradas correctamente")

except Exception as e:
    print(f"‚ùå Error leyendo archivos CSV: {e}")
    exit()

# -------------------------------
# Merge de los datos
# -------------------------------
ventas_completas_df = ventas_df.merge(productos_df, left_on='id_producto', right_on='producto_ID', how='left')
ventas_completas_df = ventas_completas_df.merge(fabricantes_df, left_on='id_fabricante_maqueta', right_on='fabricante_ID', how='left')
ventas_completas_df = ventas_completas_df.merge(clientes_df, left_on='id_clientes', right_on='cliente_ID', how='left')

ventas_completas_df['FechaEmision'] = pd.to_datetime(ventas_completas_df['FechaEmision'])

print("‚úÖ Merge de datos completado correctamente")
print("üìä Generando gr√°ficos...")

# -------------------------------
# 1. Stock por fabricante
# -------------------------------
plt.figure(figsize=(10, 8))
stock_por_fabricante = productos_df.groupby('id_fabricante_maqueta')['CantStockActual'].sum()
fabricantes_nombres = fabricantes_df.set_index('fabricante_ID').loc[stock_por_fabricante.index]['Fabricante']

colors_pie = ['#FF6B6B', '#4ECDC4', '#FFE66D']
plt.pie(stock_por_fabricante.values, labels=fabricantes_nombres.values, autopct='%1.1f%%', colors=colors_pie, startangle=90)
plt.title('Distribuci√≥n de Stock Actual por Fabricante', fontsize=14, fontweight='bold')
plt.savefig(os.path.join(graficos_dir, '1_stock_por_fabricante.png'), dpi=300, bbox_inches='tight')
plt.close()

# -------------------------------
# 2. Productos m√°s vendidos
# -------------------------------
plt.figure(figsize=(12, 8))
ventas_por_producto = ventas_df.groupby('id_producto')['Cantidad'].sum().sort_values(ascending=False)
productos_nombres = productos_df.set_index('producto_ID').loc[ventas_por_producto.index]['Nombre']

bars = plt.bar(range(len(ventas_por_producto)), ventas_por_producto.values, color='#2E8B57', alpha=0.8)
plt.xlabel('Productos')
plt.ylabel('Cantidad Vendida')
plt.title('Productos M√°s Vendidos', fontsize=14, fontweight='bold')
plt.xticks(range(len(ventas_por_producto)), [f"Prod {i}" for i in ventas_por_producto.index], rotation=45)

for bar, valor in zip(bars, ventas_por_producto.values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, str(valor), ha='center', va='bottom')

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '2_productos_mas_vendidos.png'), dpi=300, bbox_inches='tight')
plt.close()

# -------------------------------
# 3. Precios de productos
# -------------------------------
plt.figure(figsize=(12, 8))
productos_ordenados = productos_df.sort_values('PrecioUSD', ascending=False)
bars = plt.bar(range(len(productos_ordenados)), productos_ordenados['PrecioUSD'], color='#87CEEB', alpha=0.8)
plt.xlabel('Productos')
plt.ylabel('Precio (USD)')
plt.title('Precios de los Productos', fontsize=14, fontweight='bold')
plt.xticks(range(len(productos_ordenados)), [f"Prod {i}" for i in productos_ordenados['producto_ID']], rotation=45)

for bar, precio in zip(bars, productos_ordenados['PrecioUSD']):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 10, f"${precio:.2f}", ha='center', va='bottom', fontsize=9)

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '3_precios_productos.png'), dpi=300, bbox_inches='tight')
plt.close()

# -------------------------------
# 4. Evoluci√≥n de ventas
# -------------------------------
plt.figure(figsize=(14, 8))
ventas_por_mes = ventas_completas_df.groupby(ventas_completas_df['FechaEmision'].dt.to_period('M')).size()
ventas_por_mes.index = ventas_por_mes.index.to_timestamp()

plt.plot(ventas_por_mes.index, ventas_por_mes.values, color='#FF4444', linewidth=2.5, marker='o')
plt.xlabel('Fecha')
plt.ylabel('Cantidad de Ventas')
plt.title('Evoluci√≥n de Ventas Mensuales (2023-2025)', fontsize=14, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=3))
plt.gcf().autofmt_xdate()

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '4_evolucion_ventas.png'), dpi=300, bbox_inches='tight')
plt.close()

# -------------------------------
# 5. Clientes que m√°s compraron
# -------------------------------
plt.figure(figsize=(12, 10))
compras_por_cliente = ventas_df.groupby('id_clientes')['Cantidad'].sum().sort_values(ascending=True).tail(15)
clientes_nombres = clientes_df.set_index('cliente_ID').loc[compras_por_cliente.index]['Nombre']

bars = plt.barh(range(len(compras_por_cliente)), compras_por_cliente.values, color='#32CD32', alpha=0.8)
plt.ylabel('Clientes')
plt.xlabel('Cantidad Total Comprada')
plt.title('Top 15 - Clientes que M√°s Compraron', fontsize=14, fontweight='bold')
plt.yticks(range(len(compras_por_cliente)), clientes_nombres.values)

for bar, valor in zip(bars, compras_por_cliente.values):
    plt.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2, str(valor), ha='left', va='center')

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '5_clientes_mas_compraron.png'), dpi=300, bbox_inches='tight')
plt.close()

# -------------------------------
# 6. Productos m√°s caros
# -------------------------------
plt.figure(figsize=(12, 8))
productos_caros = productos_df.nlargest(8, 'PrecioUSD')
bars = plt.bar(range(len(productos_caros)), productos_caros['PrecioUSD'], color='#FFD700', alpha=0.8)
plt.xlabel('Productos')
plt.ylabel('Precio (USD)')
plt.title('Productos M√°s Caros', fontsize=14, fontweight='bold')
plt.xticks(range(len(productos_caros)), [f"{row['Nombre'][:15]}..." for _, row in productos_caros.iterrows()], rotation=45, ha='right')

for bar, precio in zip(bars, productos_caros['PrecioUSD']):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 20, f"${precio:.2f}", ha='center', va='bottom')

plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '6_productos_mas_caros.png'), dpi=300, bbox_inches='tight')
plt.close()

# -------------------------------
# 7. Matriz de calor
# -------------------------------
plt.figure(figsize=(12, 8))
top_productos = productos_df.nlargest(5, 'PrecioUSD')
matriz_data = []
for _, producto in top_productos.iterrows():
    cantidad_vendida = ventas_df[ventas_df['id_producto'] == producto['producto_ID']]['Cantidad'].sum()
    matriz_data.append([producto['PrecioUSD'], cantidad_vendida])

matriz_data = np.array(matriz_data).T
sns.heatmap(matriz_data, annot=True, fmt='.1f', cmap='YlOrRd',
            xticklabels=[f"Prod {i}" for i in top_productos['producto_ID']],
            yticklabels=['Precio (USD)', 'Cantidad Vendida'])
plt.title('Matriz de Calor: Precio vs Cantidad Vendida (Top 5 Productos M√°s Caros)', fontsize=14, fontweight='bold')
plt.tight_layout()
plt.savefig(os.path.join(graficos_dir, '7_matriz_calor.png'), dpi=300, bbox_inches='tight')
plt.close()

# -------------------------------
# Generaci√≥n del PDF
# -------------------------------
print("üìÑ Generando informe PDF...")

class PDFReport(FPDF):
    def header(self):
        if self.page == 1:
            self.set_font('Times', 'B', 16)
            self.cell(0, 10, 'INFORME COMPLETO - VENTAS DE MAQUETAS DE TRENES', 0, 1, 'C')
            self.set_font('Times', 'B', 14)
            self.cell(0, 10, 'An√°lisis de Datos y Tendencias del Mercado', 0, 1, 'C')
            self.ln(10)
    def footer(self):
        self.set_y(-15)
        self.set_font('Times', 'I', 8)
        self.cell(0, 10, f'P√°gina {self.page}', 0, 0, 'C')
    def chapter_title(self, title):
        self.set_font('Times', 'B', 14)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(5)
    def chapter_body(self, body):
        self.set_font('Times', '', 12)
        self.multi_cell(0, 6, body)
        self.ln()

pdf = PDFReport()
pdf.set_auto_page_break(auto=True, margin=15)
pdf.add_page()

# -------------------------------
# Introducci√≥n
# -------------------------------
pdf.chapter_title('INTRODUCCI√ìN')
intro_text = """
Este informe presenta un an√°lisis completo de las ventas de maquetas de trenes para el per√≠odo 
2023-2025. El an√°lisis incluye distribuci√≥n de stock, comportamiento de ventas, perfil de clientes 
y relaci√≥n entre precio y demanda. Los datos fueron procesados mediante t√©cnicas de miner√≠a de datos 
y visualizaci√≥n para extraer insights estrat√©gicos que permitan optimizar el inventario y las 
estrategias de marketing.
"""
pdf.chapter_body(intro_text)

# -------------------------------
# Agregar gr√°ficos y explicaciones
# -------------------------------
graficos = [
    ('1. DISTRIBUCI√ìN DE STOCK POR FABRICANTE', '1_stock_por_fabricante.png', 
     "El gr√°fico circular muestra la distribuci√≥n del stock actual entre los principales fabricantes. "
     "M√§rklin lidera con el mayor porcentaje, seguido por Hornby y Bachmann. Esto permite identificar "
     "qu√© fabricantes requieren ajustes de inventario."),
    ('2. PRODUCTOS M√ÅS VENDIDOS', '2_productos_mas_vendidos.png', 
     "Este gr√°fico de barras representa los productos m√°s vendidos en el per√≠odo 2023-2025. "
     "Se observa que los productos de la serie X son los m√°s populares."),
    ('3. PRECIOS DE LOS PRODUCTOS', '3_precios_productos.png', 
     "Se muestra la variaci√≥n de precios de todos los productos. Los productos de gama premium destacan "
     "con precios significativamente m√°s altos."),
    ('4. EVOLUCI√ìN DE VENTAS MENSUALES', '4_evolucion_ventas.png', 
     "El gr√°fico de l√≠neas indica c√≥mo evolucionaron las ventas mes a mes, permitiendo detectar picos "
     "y ca√≠das estacionales."),
    ('5. CLIENTES QUE M√ÅS COMPRARON', '5_clientes_mas_compraron.png', 
     "Top 15 clientes que realizaron mayores compras. Identificar clientes clave ayuda a estrategias "
     "de fidelizaci√≥n."),
    ('6. PRODUCTOS M√ÅS CAROS', '6_productos_mas_caros.png', 
     "Los productos m√°s caros del inventario. Su an√°lisis permite definir m√°rgenes y estrategias de venta."),
    ('7. MATRIZ DE CALOR: PRECIO VS CANTIDAD VENDIDA', '7_matriz_calor.png', 
     "La matriz muestra la relaci√≥n entre precio y cantidad vendida de los productos m√°s caros. "
     "Ayuda a detectar la elasticidad de la demanda."),
]

for titulo, archivo, descripcion in graficos:
    pdf.add_page()
    pdf.chapter_title(titulo)
    pdf.image(os.path.join(graficos_dir, archivo), x=10, w=190)
    pdf.chapter_body(descripcion)

# -------------------------------
# Conclusi√≥n
# -------------------------------
pdf.add_page()
pdf.chapter_title('CONCLUSIONES')
conclusion_text = """
El an√°lisis integral de ventas permite varias conclusiones clave:
- Identificaci√≥n de los fabricantes con mayor stock y necesidad de rotaci√≥n.
- Reconocimiento de los productos m√°s vendidos y estrategias de reposici√≥n.
- Comprensi√≥n de la evoluci√≥n temporal de las ventas y detecci√≥n de patrones estacionales.
- Identificaci√≥n de clientes estrat√©gicos y oportunidades de fidelizaci√≥n.
- Relaci√≥n precio-demanda para optimizar precios y m√°rgenes de productos premium.

Este informe constituye una herramienta √∫til para la toma de decisiones estrat√©gicas en la gesti√≥n
de inventario y comercializaci√≥n de maquetas de trenes.
"""
pdf.chapter_body(conclusion_text)

# -------------------------------
# Guardar PDF
# -------------------------------
pdf.output(pdf_path)
print(f"‚úÖ Informe PDF generado correctamente en {pdf_path}")
